{
	/*
		./\/\.' ENiGMA½ System Configuration -/--/-------- - --   -

		_____________________   _____  ____________________    __________\_   /
		\__   ____/\_ ____   \ /____/ /   _____ __         \  /   ______/ // /___jp!
		//   __|___//   |    \//   |//   |    \//  |  |    \//        \ /___   /_____
		/____       _____|      __________       ___|__|      ____|     \   /  _____  \
		---- \______\ -- |______\ ------ /______/ ---- |______\ - |______\ /__/ // ___/
																		 /__   _\
		<*>   ENiGMA½  // HTTPS://GITHUB.COM/NUSKOOLER/ENIGMA-BBS   <*>       /__/

		*-----------------------------------------------------------------------------*
		Generated by ENiGMA½ v0.0.9-alpha / hjson v3.1.1
		*-----------------------------------------------------------------------------*


		------------------------------- -- -    -
		General Information
		------------------------------- -   -
		This configuration is in HJSON (http://hjson.org/) format. Strict to-spec
		JSON is also perfectly valid. Use 'hjson' from npm to convert to/from JSON.

		See http://hjson.org/ for more information and syntax.

		Various editors and IDEs such as Sublime Text 3, Visual Studio Code, and so
		on have syntax highlighting for the HJSON format which are highly recommended.


		------------------------------- -- -    -
		Configuration
		------------------------------- -   -
		ENiGMA½ is *highly* configurable, and thus can be overwhelming at first!

		By default, this file contains common configuration elements, examples, etc.
		To see a more complete view of settings available to the system, don't be
		afraid to open up core/config.js and look around. Do not make changes there
		however! All system configuration can be extended and defaults overridden
		via this file!

		Please see RTFM ...er, uh... see the documentation for more information, and
		don't be shy to ask for help:

		BBS     : Xibalba @ xibalba.l33t.codes
		FTN     : BBS Discussion on fsxNet
		IRC     : #enigma-bbs / FreeNode
		Email   : bryan@l33t.codes
	*/

	general: {
		//  Your BBS Name!
		boardName: Crystal Dragon
		menuFile: crystal_dragon-menu.hjson
		promptFile: crystal_dragon-prompt.hjson
	}
	paths: {
		//
		//  Other paths can also be configured as well,
		//  but generally unnecessary
		//
		logs: D:\bbs\enigma\logs\
	}
	logging: {
		//
		//  Each block here represents a Bunyan style config.
		//  See https://github.com/trentm/node-bunyan#streams
		//
		//  Remember you can pipe logs through Bunyan to pretty-print:
		//  tail -F ./logs/enigma-bbs.log | bunyan
		//
		//  (npm install -g bunyan to get the binary)
		//
		//  We default to a rotating-file stream:
		//  https://github.com/trentm/node-bunyan#stream-type-rotating-file
		//
		rotatingFile: {
			//  If you're having trouble, try setting this to "trace"
			level: trace
			type: rotating-file
			fileName: enigma-bbs.log
			period: 1d
			count: 3
		}
	}
	theme: {
		//  Default theme applied to new users. "*" indicates random.
		default: "luciano_blocktronics"
		//  Theme applied before a user has logged in. "*" indicates random.
		preLogin: "luciano_blocktronics" //
		//  dateFormat, timeFormat, and dateTimeFormat blocks configure
		//  moment.js (https://momentjs.com/docs/#/displaying/) style formats
		//  for dates and times. Short and long versions are available.
		//  Note that themes may override these settings.
		//
		passwordChar: *
		dateFormat: {
			short: MM/DD/YYYY
			long: ddd, MMMM Do, YYYY
		}
		timeFormat: {
			short: h:mm a
		}
		dateTimeFormat: {
			short: MM/DD/YYYY h:mm a
			long: ddd, MMMM Do, YYYY, h:mm a
		}
	}

	//
	//  Login servers represent available servers (or protocols) in which
	//  users are permitted to access your system.
	//
	loginServers: {
		//  Remember kids, Telnet is insecure!
		telnet: {
			//  It's best to use non-privileged ports and NAT/foward to them
			port: 8888
			enabled: true
			firstMenu: telnetConnected
		}

		//  ...but SSH *is* secure!
		ssh: {
			port: 8889

			//
			//  To enable SSH:
			//  1) Generate a Private Key (PK):
			//  > openssl genrsa -des3 -out ./config/ssh_private_key.pem 2048
			//  2) Set "privateKeyPass" below
			//
			enabled: true

			//  set this to your PK's password, generated in step #1 above
			privateKeyPem: "D:\\BBS\\enigma\\config\\ssh_private_key.pem"
			privateKeyPass: "!1QqAaZz@2WwSsXx#3EeDdCc$4RrFfVv"

			//
			//  It's possible to lock down various algorithms available to
			//  SSH, but be aware this may limit the clients that can connect!
			//
			algorithms: {
				kex: [
					ecdh-sha2-nistp256
					ecdh-sha2-nistp384
					ecdh-sha2-nistp521
					diffie-hellman-group-exchange-sha256
					diffie-hellman-group14-sha1
					diffie-hellman-group-exchange-sha1
					diffie-hellman-group1-sha1
				]
				cipher: [
					aes128-ctr
					aes192-ctr
					aes256-ctr
					aes128-gcm
					aes128-gcm@openssh.com
					aes256-gcm
					aes256-gcm@openssh.com
					aes256-cbc
					aes192-cbc
					aes128-cbc
					blowfish-cbc
					3des-cbc
					arcfour256
					arcfour128
					cast128-cbc
					arcfour
				]
				hmac: [
					hmac-sha2-256
					hmac-sha2-512
					hmac-sha1
					hmac-md5
					hmac-sha2-256-96
					hmac-sha2-512-96
					hmac-ripemd160
					hmac-sha1-96
					hmac-md5-96
				]
				compress: [
					none
				]
			}
		   
			firstMenu: sshConnected
			firstMenuNewUser: sshConnectedNewUser
		}
		webSocket: {
			//
			//  Setting "proxied" to true allows non-secure (ws://) WebSockets
			//  to be considered secure when the X-Fowarded-Proto HTTP header
			//  is set to "https". This is helpful when ENiGMA is running behind
			//  another web server doing SSL/TLS termination.
			//
			proxied: false

			//  Non-secure WebSockets, or ws://
			ws: {
				port: 8810
				enabled: false
			}

			//  Secure WebSockets, or wss://
			wss: {
				port: 8811
				enabled: false

				//
				//  Certificate and Key in PEM format.
				//  Note that web browsers will not trust self-signed certs. Look
				//  into Let's Encrypt and perhaps running ENiGMA behind another
				//  web server such as Caddy.
				//
				certPem: D:\bbs\enigma\config\https_cert.pem
				keyPem: D:\bbs\enigma\config\https_cert_key.pem
			}
		}
	}

	//
	//  Content Servers expose content from the system
	//
	contentServers: {
		//
		//  The Web Content Server can expose content over HTTP (http://) and
		//  HTTPS (https://) for (but not limited to) the following purposes:
		//  * Static content
		//  * Web downloads from the file base
		//  * Password reset forms (sent to users in PW reset emails; see
		//    "email" block below)
		//
		web: {
			//  Set to your public FQDN
			domain: "another-fine-enigma-bbs.org"

			//  Standard issue "www" folder. Place static content here
			staticRoot: '''D:\bbs\enigma\www'''

			//
			//  This block configures password reset emails. Template files
			//  support the following variables:
			//  * %BOARDNAME%       : Name of BBS
			//  * %USERNAME%        : Username of whom to reset password
			//  * %TOKEN%           : Reset token
			//  * %RESET_URL%       : In case of email, the link to follow
			//    for reset. In case of landing page, URL to POST submit reset form.
			//
			resetPassword: {
				resetPassEmailText: D:\bbs\enigma\misc\reset_password_email.template.txt
				resetPassEmailHtml: D:\bbs\enigma\misc\reset_password_email.template.html
				resetPageTemplate: D:\bbs\enigma\www\reset_password.template.html
			}
			http: {
				port: 8080
				enabled: false
			}
			https: {
				port: 8443
				enabled: false //
				//  Note that web browsers will not trust self-signed certs. Look
				//  into Let's Encrypt and perhaps running ENiGMA behind another
				//  web server such as Caddy.
				//
				certPem: D:\bbs\enigma\config\https_cert.pem
				keyPem: D:\bbs\enigma\config\https_cert_key.pem
			}
		}

		//  Ladies and gentlemen, a Gopher server!
		gopher: {
			port: 8070
			enabled: false //
			//  The Gopher Content Server can export message base
			//  conferences and areas via the "messageConferences" key.
			//
			//  Example:
			//  messageConferences: {
			//      some_conf: [ "area_tag1", "area_tag2" ]
			//  }
			publicHostname: another-fine-enigma-bbs.org
			publicPort: 8080
			bannerFile: gopher_banner.asc
		}
	}

	//
	//  Currently, ENiGMA½ can use external email to mail
	//  users for password resets. Additional functionality will
	//  be added in the future.
	//
	 email: {
	defaultFrom: sysop@cdbbs.net
	
	transport: {
		    host: smtp.zoho.com
			port: 587
			secure: true
			auth: {
				user: sysop@cdbbs.net
				pass: E5jsv8l;
			}
		}
	}

	//  Message conferences and areas are within this block
	messageConferences: {
		local: {
			name: Local
			desc: Local Areas
			sort: 1
			default: true
			areas: {
				general: {
					name: General
					desc: General chit-chat
					sort: 1
					default: true
				}
				g2: {
					name: Test
					desc: Testing Ground
					sort: 2
				}
			}
		}
		
		agoranet: {
			name: Agoranet
			desc: This network is for blatant exploitation of the greatest BBS scene art group ever.. ACiD.
			sort: 3
			areas: {
				agoranet_bbs: {
					name: BBS Discussion
					desc: Discussion related to BBSs
				}
			}
		}
		
		  fsxnet: {
			name: fsxNet
			desc: "[F]un, [S]imple, e[X]perimental Network"
			sort: 2
			areas: {
				fsx_gen: {
					name: General
					desc: fsxNet chat, testing and more...
					sort: 1
				}
				fsx_mys: {
					name: FSX_MYS
					desc: Mystic BBS discussions.
					sort: 2
				}
			}
		}
	}

  messageNetworks: {
	ftn: {
		networks: {
			agoranet: {
					localAddress: "46:1/198"
			}
			fsxnet: {
					localAddress: "21:1/167"
			}
		}
		
		areas: {
			agoranet_bbs: {
				network: agoranet
				tag: AGN_BBS
				uplinks: "46:1/100"
			}
			fsx_gen: {
				network: fsxnet
				tag: FSX_GEN
				uplinks: [ "21:1/100" ]
			}
			fsx_mys: {
				network: fsxnet
				tag: FSX_MYS
				uplinks: [ "21:1/100" ]
			}
		}
	}
}
	
	
	//  Configuration block for scanner/tosser modules
	scannerTossers: {
		//  The most popular being FTN/BSO style networks
		ftn_bso: {
			schedule: {
					import: every 1 hours or @watch:D:\BBS\enigma\mail\ftn_in\toss!.now
					export: every 1 hours or @immediate
			}
			defaultZone: 21
			defaultNetwork: fsxnet
			nodes: {
				"46:*": {
					packetPassword: mypass
					encoding: cp437
					archiveType: zip
					tic: {
						password: TESTY-TEST
						uploadBy: Agoranet TIC
						allowReplace: true
					}
				}
				"21:1/100": {
						archiveType: 7Zip
						#encoding: cp437
						encoding: utf8
						tic: {
							password: GREEN582
							uploadBy: fsxnet TIC
						}
				}
			}
		}
	}

	//
	//  ENiGMA½ comes with a very powerful File Base, but may be a bit strange
	//  until you get used to it. Please see the documentation!
	//
	fileBase: {
		//
		//  Storage tags with relative paths (that is, paths that do not start
		//  with a "/") are relative to the following path:
		//
		areaStoragePrefix: '''D:\BBS\enigma\file_base\'''

		//
		//  Storage tags create a tag -> directory (relative or full path)
		//  that can be used in areas.
		//
		storageTags: {
			//
			//  Example storage tag: "super_l33t_warez":
			//  super_l33t_warez: "/path/to/super/l33t/warez"
			//
		}
		areas: {
			//
			//  Example area with the areaTag of "an_example_area":
			//  an_example_area: {
			//      name: "Example File Area"
			//      desc: "It's just an example, yo!"
			//      storageTags: [
			//          "super_l33t_warez"
			//      ]
			//  }
			//
			//  File Base Areas are read-only (ie: download only) by default.
			//  To make a uploadable area, set ACS as you like. For example,
			//  to allow all users to upload to an area:
			//
			//  an_example_area: {
			//      // ...
			//      acs: {
			//          write: GM[users]
			//      }
			//  }
		}
	}

	//  General user configuration
	users: {
		//
		//  ENiGMA½ utilizes user groups similar to Windows and *nix. Built in groups
		//  include "users" (for regular users) and "sysops" for +ops. You can add other
		//  groups to the system as well by adding a 'groups' key in this section:
		//  groups: [
		//      "leet", "lamerz"
		//  ]
		//
		//
		//  Set default group(s) new users should automatically be assigned to
		//  defaultGroups : [
		//      "lamerz"
		//  ]
		//

		//  Should new users require +op activation?
		requireActivation: false

		//  How long pre-authenticated users (have not logged in) can idle
		preAuthIdleLogoutSeconds: 180

		//  How long authenticated users (logged in) can idle
		idleLogoutSeconds: 360

		//  Usernames reserved for applying to your system
		newUserNames: [
			new
			apply
		]
	}

	//  Archive files and related
 archives : {
	 archivers : {
		 '7Zip' : {
			 compress        : {
				 cmd         : '''C:\Program Files\7-Zip\7z.exe''',
				 args        : [ 'a', '-tzip', '{archivePath}', '{fileList}' ],
			 },
			 decompress      : {
				 cmd         : '''C:\Program Files\7-Zip\7z.exe''',
				 //args        : [ 'e', '-o{extractPath}', '{archivePath}' ]   //  :TODO: should be 'x'?
			 },
			 list            : {
				 cmd         : '''C:\Program Files\7-Zip\7z.exe''',
				 args        : [ 'l', '{archivePath}' ],
				 entryMatch  : '^[0-9]{4}-[0-9]{2}-[0-9]{2}\\s[0-9]{2}:[0-9]{2}:[0-9]{2}\\s[A-Za-z\\.]{5}\\s+([0-9]+)\\s+[0-9]+\\s+([^\\r\\n]+)$',
			 },
			 extract         : {
				 cmd         : '''C:\Program Files\7-Zip\7z.exe''',
				 args        : [ 'e', '-o{extractPath}', '{archivePath}', '{fileList}' ],
			 },
		 },
	 }
}
	fileTransferProtocols: {
		//
		//  Each key in the "fileTransferProtocols" configuration block defines
		//  an external file transfer utility for legacy protocols such as
		//  X, Y, and Z-Modem.
		//
		//  You will want to ensure your system has these external utilities
		//  installed and/or define new or additional protocols. Please
		//  see the documentation for more information!
		//
	}
	statLog: {
		systemEvents: {
			//  Max login history event records kept. -1 = unlimited
			loginHistoryMax: -1
		}
	}
}